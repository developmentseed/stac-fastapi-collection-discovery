{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STAC Collection Discovery API","text":"<p>A collection-search-only STAC API that aggregates collection search results from multiple upstream STAC APIs. This API provides collection discovery functionality only - it does not support item search operations.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Combines collection search results from multiple upstream STAC APIs</li> <li>Supports standard STAC collection search parameters (bbox, datetime, limit, fields, sortby, filter, free text)</li> <li>Token-based pagination across multiple APIs</li> <li>Health check endpoint for monitoring upstream API availability and collection-search capability</li> </ul>"},{"location":"#running-it-locally","title":"Running it locally","text":""},{"location":"#run-the-server-with-uvicorn","title":"Run the server with uvicorn","text":"<p>Set the required environment variable with comma-separated STAC API URLs:</p> <pre><code>export UPSTREAM_API_URLS=https://stac.eoapi.dev,https://stac.maap-project.org\n</code></pre> <p>Run the server:</p> <pre><code>uv run python -m uvicorn stac_fastapi.collection_discovery.app:app --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"#run-the-server-with-docker","title":"Run the server with Docker","text":"<p>Run the docker network (STAC Collection Discovery API + STAC Browser)</p> <pre><code>docker compose up\n</code></pre> <p>This will bring the API up at <code>http://localhost:8000</code> and a STAC Browser instance at <code>http://localhost:8080</code>.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#installation","title":"Installation","text":"<p>Install dependencies:</p> <pre><code>uv sync\n</code></pre> <p>Install pre-commit hooks:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run tests:</p> <pre><code>uv run pytest\n</code></pre> <p>We use pytest-recording to mock API calls with \"pre-recorded\" API responses. When adding new tests use the <code>@pytest.mark.vcr</code> decorator function to indicate pytest-recording should be used. Record the new responses and commit them to the repository.</p> <pre><code>uv run pytest -v -s --record-mode new_episodes\ngit add &lt;new files here&gt;\ngit commit -a -m 'new test episodes'\n</code></pre> <p>To update the existing recorded API responses:</p> <pre><code>uv run pytest -v -s --record-mode rewrite --block-network\ngit commit -a -m 'updated test episodes'\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<p>To serve the documentation site run:</p> <pre><code>uv sync --group docs\nuv run mkdocs serve -o\n</code></pre> <p>The docs site will be available in your browser at localhost:3000.</p>"},{"location":"contributing/#commit-messages-and-versioning","title":"Commit Messages and Versioning","text":"<p>This project uses Conventional Commits for commit messages. This helps us automatically generate changelogs and determine version bumps.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"contributing/#types","title":"Types","text":"<ul> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>docs</code>: Documentation only changes</li> <li><code>style</code>: Changes that do not affect the meaning of the code (white-space, formatting, etc)</li> <li><code>refactor</code>: A code change that neither fixes a bug nor adds a feature</li> <li><code>test</code>: Adding missing tests or correcting existing tests</li> <li><code>chore</code>: Changes to the build process or auxiliary tools</li> </ul>"},{"location":"contributing/#examples","title":"Examples","text":"<pre><code>feat: add support for multiple STAC API endpoints\nfix: handle timeout errors in collection discovery\ndocs: update API documentation for new endpoints\n</code></pre>"},{"location":"contributing/#releases-and-versioning","title":"Releases and Versioning","text":"<p>Versions are automatically determined from git tags using PDM's SCM versioning.</p> <ul> <li>Tagged commits represent releases (e.g., <code>v0.1.0</code>)</li> <li>Development versions show commit distance from the last tag (e.g., <code>0.1.dev14+ga7b98e8.d20250918</code>)</li> <li>Create new releases by pushing git tags following semantic versioning</li> </ul> <p>To create a new release:</p> <pre><code>git tag v0.2.0\ngit push origin v0.2.0\n</code></pre>"},{"location":"using-the-api/","title":"Using the API","text":"<p>The STAC Collection Discovery API is a collection-search-only STAC API that combines paginated search results from multiple upstream STAC APIs into a single endpoint.</p> In\u00a0[1]: Copied! <pre>import httpx\nimport pystac_client\nfrom requests import Request\n\n# Assumes the docker network is running\nAPI_BASE_URL = \"http://localhost:8000\"\n</pre> import httpx import pystac_client from requests import Request  # Assumes the docker network is running API_BASE_URL = \"http://localhost:8000\" In\u00a0[2]: Copied! <pre># Get the landing page to see what APIs are configured\nresponse = httpx.get(f\"{API_BASE_URL}/\")\nlanding_page = response.json()\n\nprint(\"API Title:\", landing_page[\"title\"])\nprint(\"Description:\", landing_page[\"description\"])\nprint(\"\\nConfigured upstream APIs:\")\nfor link in landing_page[\"links\"]:\n    if link[\"rel\"] == \"child\":\n        print(f\"- {link['href']}\")\n</pre> # Get the landing page to see what APIs are configured response = httpx.get(f\"{API_BASE_URL}/\") landing_page = response.json()  print(\"API Title:\", landing_page[\"title\"]) print(\"Description:\", landing_page[\"description\"]) print(\"\\nConfigured upstream APIs:\") for link in landing_page[\"links\"]:     if link[\"rel\"] == \"child\":         print(f\"- {link['href']}\") <pre>API Title: STAC Collection Discovery API\nDescription: A collection-search-only STAC API that combines paginated search results from multiple upstream STAC APIs.\n\n## API Configuration\n\nThis API has been pre-configured to search this set of upstream STAC APIs by default:\n\n- https://stac.maap-project.org\n\n- https://stac.eoapi.dev\n\n- https://cmr.earthdata.nasa.gov/stac/ALL\n\nUsers can override this configuration for individual requests by providing their own list of APIs using the `apis` query parameter, either as multiple parameters (`?apis=url1&amp;apis=url2`) or as a comma-separated string (`?apis=url1,url2`).\n\n## Conformance Classes\n\nThe API's conformance classes are dynamically calculated based on the intersection of capabilities across all queried upstream APIs. The conformance classes returned for any given request represent only the collection-search features that are supported by ALL upstream APIs in the request, limited to the extensions enabled in this application: filter, sort, free-text search, and fields selection.\n\n## Pagination Behavior\n\nThe `limit` parameter is passed to each upstream API individually, meaning the total number of collections returned will be `limit \u00d7 number of APIs`. For example, with `limit=10` and 3 upstream APIs, you may receive up to 30 collections per page. Pagination state is maintained using base64-encoded tokens that track the current position across all upstream APIs.\n\n## Example Usage\n\n- Search all pre-configured APIs: `GET /collections`\n\n- Search with bounding box: `GET /collections?bbox=-180,-90,180,90&amp;limit=5`\n\n- Search specific APIs: `GET /collections?apis=https://stac.eoapi.dev,https://stac.maap-project.org`\n\n- Free-text search: `GET /collections?q=landsat,sentinel`\n\n- Filtered search: `GET /collections?filter=mission='sentinel-2'&amp;filter-lang=cql2-text`\n\n- Paginated search: `GET /collections?token=eyJ...` \n\nConfigured APIs:\nhttps://stac.maap-project.org\nhttps://stac.eoapi.dev\nhttps://cmr.earthdata.nasa.gov/stac/ALL\n\nConfigured upstream APIs:\n- https://stac.maap-project.org\n- https://stac.eoapi.dev\n- https://cmr.earthdata.nasa.gov/stac/ALL\n</pre> In\u00a0[3]: Copied! <pre># Check what features are supported\nresponse = httpx.get(f\"{API_BASE_URL}/conformance\")\nconformance = response.json()\n\nprint(\"Supported collection-search conformance classes:\")\nfor cls in conformance[\"conformsTo\"]:\n    if \"collection-search\" in cls:\n        print(f\"- {cls}\")\n</pre> # Check what features are supported response = httpx.get(f\"{API_BASE_URL}/conformance\") conformance = response.json()  print(\"Supported collection-search conformance classes:\") for cls in conformance[\"conformsTo\"]:     if \"collection-search\" in cls:         print(f\"- {cls}\") <pre>Supported collection-search conformance classes:\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#free-text\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#sort\n</pre> <p>The important ones for this application are the <code>/collection-search</code> conformance classes. In this example, basic collection search is available along with the <code>sort</code> and <code>free-text</code> extensions.</p> <p>If we specify a specific set of upstream APIs (using the <code>apis</code> parameter), the conformance classes can change.</p> In\u00a0[4]: Copied! <pre>response = httpx.get(\n    f\"{API_BASE_URL}/conformance\",\n    params={\n        \"apis\": [\n            \"https://stac.maap-project.org\",\n            \"https://stac.eoapi.dev\",\n        ]\n    },\n)\nconformance = response.json()\n\nprint(\"Supported conformance classes:\")\nfor cls in conformance[\"conformsTo\"]:\n    if \"collection-search\" in cls:\n        print(f\"- {cls}\")\n</pre> response = httpx.get(     f\"{API_BASE_URL}/conformance\",     params={         \"apis\": [             \"https://stac.maap-project.org\",             \"https://stac.eoapi.dev\",         ]     }, ) conformance = response.json()  print(\"Supported conformance classes:\") for cls in conformance[\"conformsTo\"]:     if \"collection-search\" in cls:         print(f\"- {cls}\") <pre>Supported conformance classes:\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#fields\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#filter\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#free-text\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#sort\n</pre> <p>By not including <code>https://cmr.earthdata.nasa.gov/stac/ALL</code> (which doesn't include the <code>filter</code> extension), our API is now capable of applying the <code>filter</code> extension to collection searches!</p> In\u00a0[13]: Copied! <pre># Basic collection search with a small limit\nresponse = httpx.get(f\"{API_BASE_URL}/collections?limit=2\")\nresults = response.json()\n\nprint(f\"Number of collections returned: {len(results['collections'])}\")\n\nprint(\"\\nCollection IDs:\")\nfor collection in results[\"collections\"]:\n    print(f\"- {collection['id']}\")\n\nprint(\"\\nPagination links:\")\nfor link in results[\"links\"]:\n    if link[\"rel\"] in [\"self\", \"next\", \"previous\"]:\n        print(f\"- {link['rel']}: {link['href']}\")\n</pre> # Basic collection search with a small limit response = httpx.get(f\"{API_BASE_URL}/collections?limit=2\") results = response.json()  print(f\"Number of collections returned: {len(results['collections'])}\")  print(\"\\nCollection IDs:\") for collection in results[\"collections\"]:     print(f\"- {collection['id']}\")  print(\"\\nPagination links:\") for link in results[\"links\"]:     if link[\"rel\"] in [\"self\", \"next\", \"previous\"]:         print(f\"- {link['rel']}: {link['href']}\") <pre>Number of collections returned: 6\n\nCollection IDs:\n- ABoVE_UAVSAR_PALSAR\n- AFRISAR_DLR\n- copernicus-dem\n- MAXAR_afghanistan_earthquake22\n- latent-reserves-in-the-swiss-nfi_1.0\n- ASAC_2201_HCL_0.5_1\n\nPagination links:\n- self: http://localhost:8000/collections?limit=2\n- next: http://localhost:8000/collections?token=eyJjdXJyZW50Ijp7Imh0dHBzOi8vc3RhYy5tYWFwLXByb2plY3Qub3JnIjoiaHR0cHM6Ly9zdGFjLm1hYXAtcHJvamVjdC5vcmcvY29sbGVjdGlvbnM_bGltaXQ9MiZmaWx0ZXJfbGFuZz1jcWwyLXRleHQmb2Zmc2V0PTIiLCJodHRwczovL3N0YWMuZW9hcGkuZGV2IjoiaHR0cHM6Ly9zdGFjLmVvYXBpLmRldi9jb2xsZWN0aW9ucz9saW1pdD0yJmZpbHRlcl9sYW5nPWNxbDItdGV4dCZvZmZzZXQ9MiIsImh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTCI6Imh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTC9jb2xsZWN0aW9ucz9maWx0ZXJfbGFuZz1jcWwyLXRleHQmbGltaXQ9MiZjdXJzb3I9ZXlKcWMyOXVJam9pVzF3aU1DNDFJR2h2ZFhJZ01TQnRJR2hqYkNCbGVIUnlZV04wYVc5dUlHUmhkR0VnWm05eUlIUm9aU0IzYVc1a2JXbHNiQ0JwYzJ4aGJtUnpJRzFoY21sdVpTQnpaV1JwYldWdWRITmNJaXhjSWtGVlgwRkJSRU5jSWl4Y0lrRlRRVU5mTWpJd01WOUlRMHhmTUM0MVhDSXNYQ0l4WENJc01USXhORE13TlRneE15d3hNMTBpTENKMWJXMGlPaUpiWENJd0xqVWdhRzkxY2lBeElHMGdhR05zSUdWNGRISmhZM1JwYjI0Z1pHRjBZU0JtYjNJZ2RHaGxJSGRwYm1SdGFXeHNJR2x6YkdGdVpITWdiV0Z5YVc1bElITmxaR2x0Wlc1MGMxd2lMRndpUVZWZlFVRkVRMXdpTEZ3aVFWTkJRMTh5TWpBeFgwaERURjh3TGpWY0lpeGNJakZjSWl3eE1qRTBNekExT0RFekxERXpYU0o5In0sImlzX2ZpcnN0X3BhZ2UiOmZhbHNlfQ==\n</pre> <p>Notice how with <code>limit=2</code>, we will get more than two collections total since the limit applies to each upstream API individually.</p> In\u00a0[14]: Copied! <pre>next_link = next(\n    (link[\"href\"] for link in results[\"links\"] if link[\"rel\"] == \"next\"),\n    None,\n)\n\nresponse = httpx.get(next_link)\nresults = response.json()\n\nprint(f\"Number of collections returned in second page: {len(results['collections'])}\")\n\nprint(\"\\nCollection IDs:\")\nfor collection in results[\"collections\"]:\n    print(f\"- {collection['id']}\")\n\nprint(\"\\nPagination links:\")\nfor link in results[\"links\"]:\n    if link[\"rel\"] in [\"self\", \"next\", \"previous\"]:\n        print(f\"- {link['rel']}: {link['href']}\")\n</pre> next_link = next(     (link[\"href\"] for link in results[\"links\"] if link[\"rel\"] == \"next\"),     None, )  response = httpx.get(next_link) results = response.json()  print(f\"Number of collections returned in second page: {len(results['collections'])}\")  print(\"\\nCollection IDs:\") for collection in results[\"collections\"]:     print(f\"- {collection['id']}\")  print(\"\\nPagination links:\") for link in results[\"links\"]:     if link[\"rel\"] in [\"self\", \"next\", \"previous\"]:         print(f\"- {link['rel']}: {link['href']}\") <pre>Number of collections returned in second page: 6\n\nCollection IDs:\n- AFRISAR_DLR2\n- AfriSAR_UAVSAR_Coreg_SLC\n- MAXAR_BayofBengal_Cyclone_Mocha_May_23\n- MAXAR_cyclone_emnati22\n- urn:ogc:def:EOP:VITO:VGT_S10_1\n- LGB_10m_traverse_1\n\nPagination links:\n- self: http://localhost:8000/collections?token=eyJjdXJyZW50Ijp7Imh0dHBzOi8vc3RhYy5tYWFwLXByb2plY3Qub3JnIjoiaHR0cHM6Ly9zdGFjLm1hYXAtcHJvamVjdC5vcmcvY29sbGVjdGlvbnM_bGltaXQ9MiZmaWx0ZXJfbGFuZz1jcWwyLXRleHQmb2Zmc2V0PTIiLCJodHRwczovL3N0YWMuZW9hcGkuZGV2IjoiaHR0cHM6Ly9zdGFjLmVvYXBpLmRldi9jb2xsZWN0aW9ucz9saW1pdD0yJmZpbHRlcl9sYW5nPWNxbDItdGV4dCZvZmZzZXQ9MiIsImh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTCI6Imh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTC9jb2xsZWN0aW9ucz9maWx0ZXJfbGFuZz1jcWwyLXRleHQmbGltaXQ9MiZjdXJzb3I9ZXlKcWMyOXVJam9pVzF3aU1DNDFJR2h2ZFhJZ01TQnRJR2hqYkNCbGVIUnlZV04wYVc5dUlHUmhkR0VnWm05eUlIUm9aU0IzYVc1a2JXbHNiQ0JwYzJ4aGJtUnpJRzFoY21sdVpTQnpaV1JwYldWdWRITmNJaXhjSWtGVlgwRkJSRU5jSWl4Y0lrRlRRVU5mTWpJd01WOUlRMHhmTUM0MVhDSXNYQ0l4WENJc01USXhORE13TlRneE15d3hNMTBpTENKMWJXMGlPaUpiWENJd0xqVWdhRzkxY2lBeElHMGdhR05zSUdWNGRISmhZM1JwYjI0Z1pHRjBZU0JtYjNJZ2RHaGxJSGRwYm1SdGFXeHNJR2x6YkdGdVpITWdiV0Z5YVc1bElITmxaR2x0Wlc1MGMxd2lMRndpUVZWZlFVRkVRMXdpTEZ3aVFWTkJRMTh5TWpBeFgwaERURjh3TGpWY0lpeGNJakZjSWl3eE1qRTBNekExT0RFekxERXpYU0o5In0sImlzX2ZpcnN0X3BhZ2UiOmZhbHNlfQ==\n- previous: http://localhost:8000/collections?token=eyJjdXJyZW50Ijp7Imh0dHBzOi8vc3RhYy5tYWFwLXByb2plY3Qub3JnIjoiaHR0cHM6Ly9zdGFjLm1hYXAtcHJvamVjdC5vcmcvY29sbGVjdGlvbnM_bGltaXQ9MiZmaWx0ZXJfbGFuZz1jcWwyLXRleHQmb2Zmc2V0PTAiLCJodHRwczovL3N0YWMuZW9hcGkuZGV2IjoiaHR0cHM6Ly9zdGFjLmVvYXBpLmRldi9jb2xsZWN0aW9ucz9saW1pdD0yJmZpbHRlcl9sYW5nPWNxbDItdGV4dCZvZmZzZXQ9MCJ9LCJpc19maXJzdF9wYWdlIjpmYWxzZX0=\n- next: http://localhost:8000/collections?token=eyJjdXJyZW50Ijp7Imh0dHBzOi8vc3RhYy5tYWFwLXByb2plY3Qub3JnIjoiaHR0cHM6Ly9zdGFjLm1hYXAtcHJvamVjdC5vcmcvY29sbGVjdGlvbnM_bGltaXQ9MiZmaWx0ZXJfbGFuZz1jcWwyLXRleHQmb2Zmc2V0PTQiLCJodHRwczovL3N0YWMuZW9hcGkuZGV2IjoiaHR0cHM6Ly9zdGFjLmVvYXBpLmRldi9jb2xsZWN0aW9ucz9saW1pdD0yJmZpbHRlcl9sYW5nPWNxbDItdGV4dCZvZmZzZXQ9NCIsImh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTCI6Imh0dHBzOi8vY21yLmVhcnRoZGF0YS5uYXNhLmdvdi9zdGFjL0FMTC9jb2xsZWN0aW9ucz9jdXJzb3I9ZXlKcWMyOXVJam9pVzF3aU1UQWdiU0JtYVhKdUlIUmxiWEJsY21GMGRYSmxJR1JoZEdFNklHeG5ZaUIwY21GMlpYSnpaWE1nTVRrNU1DMDVOVndpTEZ3aVFWVmZRVUZFUTF3aUxGd2lURWRDWHpFd2JWOTBjbUYyWlhKelpWd2lMRndpTVZ3aUxERXlNVFF6TVRNMU56UXNNVEJkSWl3aWRXMXRJam9pVzF3aU1UQWdiU0JtYVhKdUlIUmxiWEJsY21GMGRYSmxJR1JoZEdFNklHeG5ZaUIwY21GMlpYSnpaWE1nTVRrNU1DMDVOVndpTEZ3aVFWVmZRVUZFUTF3aUxGd2lURWRDWHpFd2JWOTBjbUYyWlhKelpWd2lMRndpTVZ3aUxERXlNVFF6TVRNMU56UXNNVEJkSW4wJTNEJmZpbHRlcl9sYW5nPWNxbDItdGV4dCZsaW1pdD0yIn0sImlzX2ZpcnN0X3BhZ2UiOmZhbHNlfQ==\n</pre> In\u00a0[15]: Copied! <pre># Search only specific APIs\nparams = {\n    \"apis\": [\n        \"https://stac.eoapi.dev\",\n        \"https://stac.maap-project.org\",\n    ],\n    \"limit\": 3,\n}\nresponse = httpx.get(\n    f\"{API_BASE_URL}/collections\",\n    params=params,\n    timeout=None,\n)\ncollections = response.json()\n\nprint(f\"Searching specific APIs: {params['apis']}\")\nprint(f\"Collections returned: {len(collections['collections'])}\")\nprint(\"\\nSome collection IDs:\")\nfor collection in collections[\"collections\"]:\n    print(f\"- {collection['id']}\")\n\n# Check canonical links to see which APIs were actually queried\nprint(\"\\nCanonical links (showing which APIs were queried):\")\nfor link in collections[\"links\"]:\n    if link[\"rel\"] == \"canonical\":\n        print(f\"- {link['href']}\")\n</pre> # Search only specific APIs params = {     \"apis\": [         \"https://stac.eoapi.dev\",         \"https://stac.maap-project.org\",     ],     \"limit\": 3, } response = httpx.get(     f\"{API_BASE_URL}/collections\",     params=params,     timeout=None, ) collections = response.json()  print(f\"Searching specific APIs: {params['apis']}\") print(f\"Collections returned: {len(collections['collections'])}\") print(\"\\nSome collection IDs:\") for collection in collections[\"collections\"]:     print(f\"- {collection['id']}\")  # Check canonical links to see which APIs were actually queried print(\"\\nCanonical links (showing which APIs were queried):\") for link in collections[\"links\"]:     if link[\"rel\"] == \"canonical\":         print(f\"- {link['href']}\") <pre>Searching specific APIs: ['https://stac.eoapi.dev', 'https://stac.maap-project.org']\nCollections returned: 6\n\nSome collection IDs:\n- copernicus-dem\n- MAXAR_afghanistan_earthquake22\n- MAXAR_BayofBengal_Cyclone_Mocha_May_23\n- ABoVE_UAVSAR_PALSAR\n- AFRISAR_DLR\n- AFRISAR_DLR2\n\nCanonical links (showing which APIs were queried):\n- https://stac.eoapi.dev/collections?limit=3&amp;filter_lang=cql2-text\n- https://stac.maap-project.org/collections?limit=3&amp;filter_lang=cql2-text\n</pre> In\u00a0[17]: Copied! <pre># Free-text search for Landsat collections\nparams = {\"q\": \"landsat\", \"limit\": 2}\nresponse = httpx.get(f\"{API_BASE_URL}/collections\", params=params)\ncollections = response.json()\n\nprint(f\"Collections matching '{params['q']}':\")\nprint(f\"Collections returned: {len(collections['collections'])}\")\nprint(\"\\nMatching collections:\")\nfor collection in collections[\"collections\"]:\n    title = collection.get(\"title\", \"No title\")\n    description = (\n        collection.get(\"description\", \"\")[:100] + \"...\"\n        if len(collection.get(\"description\", \"\")) &gt; 100\n        else collection.get(\"description\", \"\")\n    )\n    api_link = next(\n        (link[\"href\"] for link in collection[\"links\"] if link[\"rel\"] == \"self\"),\n        None,\n    )\n    print(f\"- {collection['id']}\")\n    print(f\"  Title: {title}\")\n    print(f\"  Upstream API link: {api_link}\")\n    print(f\"  Description: {description}\")\n    print()\n</pre> # Free-text search for Landsat collections params = {\"q\": \"landsat\", \"limit\": 2} response = httpx.get(f\"{API_BASE_URL}/collections\", params=params) collections = response.json()  print(f\"Collections matching '{params['q']}':\") print(f\"Collections returned: {len(collections['collections'])}\") print(\"\\nMatching collections:\") for collection in collections[\"collections\"]:     title = collection.get(\"title\", \"No title\")     description = (         collection.get(\"description\", \"\")[:100] + \"...\"         if len(collection.get(\"description\", \"\")) &gt; 100         else collection.get(\"description\", \"\")     )     api_link = next(         (link[\"href\"] for link in collection[\"links\"] if link[\"rel\"] == \"self\"),         None,     )     print(f\"- {collection['id']}\")     print(f\"  Title: {title}\")     print(f\"  Upstream API link: {api_link}\")     print(f\"  Description: {description}\")     print() <pre>Collections matching 'landsat':\nCollections returned: 4\n\nMatching collections:\n- glad-glclu2020-change-v2\n  Title: GLAD: Net change of land cover and land use between 2000 and 2020\n  Upstream API link: https://stac.maap-project.org/collections/glad-glclu2020-change-v2\n  Description: The GLAD Global Land Cover and Land Use Change dataset quantifies changes in forest extent and heigh...\n\n- glad-glclu2020-v2\n  Title: GLAD: Annual maps of land cover and land use\n  Upstream API link: https://stac.maap-project.org/collections/glad-glclu2020-v2\n  Description: The GLAD Global Land Cover and Land Use Change dataset quantifies changes in forest extent and heigh...\n\n- HLSL30_2.0\n  Title: HLS Landsat Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30_2.0\n  Description: The Harmonized Landsat Sentinel-2 (HLS) project provides consistent surface reflectance (SR) and top...\n\n- OPERA_L3_DIST-ALERT-HLS_V1_1\n  Title: OPERA Land Surface Disturbance Alert from Harmonized Landsat Sentinel-2 product (Version 1)\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/OPERA_L3_DIST-ALERT-HLS_V1_1\n  Description: The Observational Products for End-Users from Remote Sensing Analysis ([OPERA](https://www.jpl.nasa....\n\n</pre> In\u00a0[18]: Copied! <pre># Search collections intersecting with a bounding box (example: continental US)\nparams = {\n    \"bbox\": \"-125,25,-66,49\",  # [west, south, east, north]\n    \"limit\": 2,\n}\nresponse = httpx.get(f\"{API_BASE_URL}/collections\", params=params)\ncollections = response.json()\n\nprint(f\"Collections intersecting bbox {params['bbox']}:\")\nprint(f\"Collections returned: {len(collections['collections'])}\")\nprint(\"\\nCollection details:\")\nfor collection in collections[\"collections\"]:\n    spatial_extent = collection.get(\"extent\", {}).get(\"spatial\", {})\n    bbox_extent = spatial_extent.get(\"bbox\", [[]])[0] if spatial_extent else \"N/A\"\n    api_link = next(\n        (link[\"href\"] for link in collection[\"links\"] if link[\"rel\"] == \"self\"),\n        None,\n    )\n    print(f\"- {collection['id']}\")\n    print(f\"  Upstream API link: {api_link}\")\n    print(f\"  Extent: {bbox_extent}\")\n    print()\n</pre> # Search collections intersecting with a bounding box (example: continental US) params = {     \"bbox\": \"-125,25,-66,49\",  # [west, south, east, north]     \"limit\": 2, } response = httpx.get(f\"{API_BASE_URL}/collections\", params=params) collections = response.json()  print(f\"Collections intersecting bbox {params['bbox']}:\") print(f\"Collections returned: {len(collections['collections'])}\") print(\"\\nCollection details:\") for collection in collections[\"collections\"]:     spatial_extent = collection.get(\"extent\", {}).get(\"spatial\", {})     bbox_extent = spatial_extent.get(\"bbox\", [[]])[0] if spatial_extent else \"N/A\"     api_link = next(         (link[\"href\"] for link in collection[\"links\"] if link[\"rel\"] == \"self\"),         None,     )     print(f\"- {collection['id']}\")     print(f\"  Upstream API link: {api_link}\")     print(f\"  Extent: {bbox_extent}\")     print() <pre>Collections intersecting bbox -125,25,-66,49:\nCollections returned: 6\n\nCollection details:\n- ESACCI_Biomass_L4_AGB_V4_100m\n  Upstream API link: https://stac.maap-project.org/collections/ESACCI_Biomass_L4_AGB_V4_100m\n  Extent: [-180.0, -90.0, 180.0, 90.0]\n\n- GEDI_CalVal_Field_Data\n  Upstream API link: https://stac.maap-project.org/collections/GEDI_CalVal_Field_Data\n  Extent: [-156.0001973, -43.1031025, 155.7179351, 65.4300929]\n\n- copernicus-dem\n  Upstream API link: https://stac.eoapi.dev/collections/copernicus-dem\n  Extent: [-180.0, -90.0, 180.0, 90.0]\n\n- MAXAR_Hurricane_Fiona_9_19_2022\n  Upstream API link: https://stac.eoapi.dev/collections/MAXAR_Hurricane_Fiona_9_19_2022\n  Extent: [-71.187593, 17.954147, -63.439022, 44.773025]\n\n- urn:ogc:def:EOP:VITO:VGT_S10_1\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/FEDEO/collections/urn%3Aogc%3Adef%3AEOP%3AVITO%3AVGT_S10_1\n  Extent: [-180, -56, 180, 75]\n\n- 14c_of_soil_co2_from_ipy_itex_cross_site_comparison\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/SCIOPS/collections/14c_of_soil_co2_from_ipy_itex_cross_site_comparison\n  Extent: [-157.4, -36.9, 147.29, 71.3]\n\n</pre> In\u00a0[22]: Copied! <pre># Connect to the API using pystac-client\nclient = pystac_client.Client.open(API_BASE_URL)\n\nprint(\"API Info:\")\nprint(f\"Title: {client.title}\")\nprint(f\"Description: {client.description[:100]}...\")\n\n# Get conformance classes\nconformance = client.get_conforms_to()\nprint(f\"\\nConformance classes: {len(conformance)} classes\")\nfor cls in conformance:\n    print(f\"- {cls}\")\n</pre> # Connect to the API using pystac-client client = pystac_client.Client.open(API_BASE_URL)  print(\"API Info:\") print(f\"Title: {client.title}\") print(f\"Description: {client.description[:100]}...\")  # Get conformance classes conformance = client.get_conforms_to() print(f\"\\nConformance classes: {len(conformance)} classes\") for cls in conformance:     print(f\"- {cls}\") <pre>API Info:\nTitle: STAC Collection Discovery API\nDescription: A collection-search-only STAC API that combines paginated search results from multiple upstream STAC...\n\nConformance classes: 12 classes\n- http://www.opengis.net/spec/cql2/1.0/conf/basic-cql2\n- http://www.opengis.net/spec/cql2/1.0/conf/cql2-json\n- http://www.opengis.net/spec/cql2/1.0/conf/cql2-text\n- http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/simple-query\n- http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n- http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n- http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#free-text\n- https://api.stacspec.org/v1.0.0-rc.1/collection-search#sort\n- https://api.stacspec.org/v1.0.0/collections\n- https://api.stacspec.org/v1.0.0/core\n</pre> In\u00a0[23]: Copied! <pre># Search for biomass collections using pystac-client\nsearch = client.collection_search(q=\"biomass\", limit=2)\n\nprint(\"Searching for biomass collections using pystac-client:\")\n\n# Show collection details\nfor i, collection in enumerate(search.collections()):\n    print(f\"\\n- {collection.id}\")\n    print(f\"  Title: {collection.title}\")\n    print(f\"  Upstream API link: {collection.get_self_href()}\")\n    description = (\n        collection.description[:100] + \"...\"\n        if len(collection.description) &gt; 100\n        else collection.description\n    )\n    print(f\"  Description: {description}\")\n    if i &gt; 3:\n        break\n</pre> # Search for biomass collections using pystac-client search = client.collection_search(q=\"biomass\", limit=2)  print(\"Searching for biomass collections using pystac-client:\")  # Show collection details for i, collection in enumerate(search.collections()):     print(f\"\\n- {collection.id}\")     print(f\"  Title: {collection.title}\")     print(f\"  Upstream API link: {collection.get_self_href()}\")     description = (         collection.description[:100] + \"...\"         if len(collection.description) &gt; 100         else collection.description     )     print(f\"  Description: {description}\")     if i &gt; 3:         break <pre>Searching for biomass collections using pystac-client:\n\n- AFRISAR_DLR\n  Title: AFRISAR_DLR\n  Upstream API link: https://stac.maap-project.org/collections/AFRISAR_DLR\n  Description: The  ESA  BIOMASS  mission  was  selected  in  2013  as  the  7th  Earth  Explorer  mission.  BIOMAS...\n\n- AFRISAR_DLR2\n  Title: AFRISAR_DLR2\n  Upstream API link: https://stac.maap-project.org/collections/AFRISAR_DLR2\n  Description: The ESA BIOMASS mission was selected in 2013 as the 7th Earth Explorer mission. BIOMASS will provide...\n\n- BIOMASS\n  Title: Biological Investigations of Marine Antarctic Systems and Stocks (BIOMASS) Data Set\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/SCIOPS/collections/BIOMASS\n  Description: BIOMASS (Biological Investigations of Marine Antarctic Systems and Stocks) was\na major multi-nationa...\n\n- 95913ffb6467447ca72c4e9d8cf30501_NA\n  Title: ESA Biomass Climate Change Initiative (Biomass_cci): Global datasets of forest above-ground biomass for the years 2007, 2010, 2015, 2016, 2017, 2018, 2019, 2020, 2021 and 2022, v6.0\n  Upstream API link: https://cmr.earthdata.nasa.gov/stac/FEDEO/collections/95913ffb6467447ca72c4e9d8cf30501_NA\n  Description: This dataset comprises estimates of forest above-ground biomass (AGB) for the years 2007, 2010, 2015...\n\n- AfriSAR_UAVSAR_Geocoded_Covariance\n  Title: AfriSAR UAVSAR Geocoded Covariance Matrix product Generated Using NISAR Tools\n  Upstream API link: https://stac.maap-project.org/collections/AfriSAR_UAVSAR_Geocoded_Covariance\n  Description: The Geocoded Covariance Matrix dataset is the 4x4 Native Covariance Matrix geocoded to a spatial res...\n</pre> In\u00a0[25]: Copied! <pre># Connect to specific APIs using pystac-client\ndef add_apis(request: Request):\n    \"\"\"Add the `apis` parameter to all requests to this STAC API client\"\"\"\n    request.params.update(\n        {\n            \"apis\": [\n                \"https://stac.eoapi.dev\",\n                \"https://stac.maap-project.org\",\n            ]\n        }\n    )\n    return request\n\n\nspecific_client = pystac_client.Client.open(API_BASE_URL, request_modifier=add_apis)\n\n# Search for biomass collections from specific APIs only\nsearch = specific_client.collection_search(q=\"biomass\", limit=2)\n\nprint(\"Searching specific APIs for biomass collections:\")\n\n# Show collection details\nfor i, collection in enumerate(search.collections()):\n    print(f\"\\n- {collection.id}\")\n    print(f\"  Title: {collection.title}\")\n    print(f\"  Upstream API link: {collection.get_self_href()}\")\n    description = (\n        collection.description[:100] + \"...\"\n        if len(collection.description) &gt; 100\n        else collection.description\n    )\n    print(f\"  Description: {description}\")\n    if i &gt; 3:\n        break\n</pre> # Connect to specific APIs using pystac-client def add_apis(request: Request):     \"\"\"Add the `apis` parameter to all requests to this STAC API client\"\"\"     request.params.update(         {             \"apis\": [                 \"https://stac.eoapi.dev\",                 \"https://stac.maap-project.org\",             ]         }     )     return request   specific_client = pystac_client.Client.open(API_BASE_URL, request_modifier=add_apis)  # Search for biomass collections from specific APIs only search = specific_client.collection_search(q=\"biomass\", limit=2)  print(\"Searching specific APIs for biomass collections:\")  # Show collection details for i, collection in enumerate(search.collections()):     print(f\"\\n- {collection.id}\")     print(f\"  Title: {collection.title}\")     print(f\"  Upstream API link: {collection.get_self_href()}\")     description = (         collection.description[:100] + \"...\"         if len(collection.description) &gt; 100         else collection.description     )     print(f\"  Description: {description}\")     if i &gt; 3:         break <pre>Searching specific APIs for biomass collections:\n\n- AFRISAR_DLR\n  Title: AFRISAR_DLR\n  Upstream API link: https://stac.maap-project.org/collections/AFRISAR_DLR\n  Description: The  ESA  BIOMASS  mission  was  selected  in  2013  as  the  7th  Earth  Explorer  mission.  BIOMAS...\n\n- AFRISAR_DLR2\n  Title: AFRISAR_DLR2\n  Upstream API link: https://stac.maap-project.org/collections/AFRISAR_DLR2\n  Description: The ESA BIOMASS mission was selected in 2013 as the 7th Earth Explorer mission. BIOMASS will provide...\n\n- AfriSAR_UAVSAR_Geocoded_Covariance\n  Title: AfriSAR UAVSAR Geocoded Covariance Matrix product Generated Using NISAR Tools\n  Upstream API link: https://stac.maap-project.org/collections/AfriSAR_UAVSAR_Geocoded_Covariance\n  Description: The Geocoded Covariance Matrix dataset is the 4x4 Native Covariance Matrix geocoded to a spatial res...\n\n- AfriSAR_UAVSAR_Geocoded_SLC\n  Title: AfriSAR UAVSAR Geocoded SLCs Generated Using NISAR Tools\n  Upstream API link: https://stac.maap-project.org/collections/AfriSAR_UAVSAR_Geocoded_SLC\n  Description: The Geocoded SLC (single-look-complex) dataset contains the geolocated SLC magnitude of a particular...\n\n- AfriSAR_UAVSAR_KZ\n  Title: AfriSAR UAVSAR Vertical Wavenumber (KZ) Generated Using NISAR Tools\n  Upstream API link: https://stac.maap-project.org/collections/AfriSAR_UAVSAR_KZ\n  Description: The Vertical Wavenumber dataset is the derivative of the radar interferometic phase for each single-...\n</pre>"},{"location":"using-the-api/#overview","title":"Overview\u00b6","text":"<p>This API acts as a proxy/aggregator, allowing you to search for collections across multiple STAC catalogs simultaneously. Instead of querying each STAC API individually, you can use this service to get unified results from all configured endpoints.</p>"},{"location":"using-the-api/#key-features","title":"Key Features\u00b6","text":"<ul> <li>Unified Collection Search: Search across multiple STAC APIs with a single request</li> <li>Dynamic API Selection: Override default APIs using the <code>apis</code> parameter</li> <li>Smart Conformance Classes: Only returns capabilities supported by ALL queried APIs</li> <li>Token-based Pagination: Maintains state across all upstream APIs</li> <li>Standard STAC Extensions: Supports filtering, sorting, free-text search, and field selection</li> </ul>"},{"location":"using-the-api/#important-behavior","title":"Important Behavior\u00b6","text":"<ul> <li>Pagination Multiplier: The <code>limit</code> parameter applies to each upstream API, so with <code>limit=10</code> and 3 APIs, you may get up to 30 collections per page</li> <li>Conformance Intersection: Only collection-search features supported by ALL upstream APIs are available in the response</li> <li>Enabled Extensions: Limited to filter, sort, free-text search, and fields selection extensions</li> </ul> <p>Let's explore how to use this API with some practical examples.</p>"},{"location":"using-the-api/#http-requests","title":"HTTP Requests\u00b6","text":"<p>The following section shows how to use <code>httpx</code> to perform queries on the API.</p>"},{"location":"using-the-api/#check-conformance-classes","title":"Check Conformance Classes\u00b6","text":"<p>The conformance classes tell us what capabilities are available. Remember, these are dynamically calculated based on what ALL upstream APIs support.</p>"},{"location":"using-the-api/#basic-collection-search","title":"Basic Collection Search\u00b6","text":"<p>Let's start with a simple collection search across all of the pre-configured APIs.</p>"},{"location":"using-the-api/#pagination","title":"Pagination\u00b6","text":"<p>The initial request returned the first page of results from each upstream API and included a <code>next</code> link with the search state embedded in it. When you send a request to the <code>next</code> link the API will decode the token into a list of <code>next</code> links from the upstream APIs, send those requests, and return the results back to you.</p>"},{"location":"using-the-api/#searching-specific-apis","title":"Searching Specific APIs\u00b6","text":"<p>You can override the default configured APIs by specifying which ones to query:</p>"},{"location":"using-the-api/#advanced-searches","title":"Advanced Searches\u00b6","text":""},{"location":"using-the-api/#free-text-search","title":"Free-Text Search\u00b6","text":"<p>Search collections using keywords (if supported by the upstream APIs):</p>"},{"location":"using-the-api/#bounding-box-search","title":"Bounding Box Search\u00b6","text":"<p>Search for collections that intersect with a geographic area:</p>"},{"location":"using-the-api/#using-pystac-client","title":"Using pystac-client\u00b6","text":"<p>The Collection Discovery API is fully compatible with <code>pystac-client</code>, which provides a more pythonic interface:</p>"},{"location":"using-the-api/#searching-specific-apis-with-pystac-client","title":"Searching Specific APIs with pystac-client\u00b6","text":"<p>You can also specify which upstream APIs to query by supplying the <code>apis</code> parameter in a <code>request_modifier</code> function:</p>"}]}